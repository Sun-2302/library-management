openapi: 3.0.3
info:
  title: Library API
  version: 1.2.1
  description: STD22001
servers:
  - url: https://library.com
tags:
  - name: Books
  - name: Authors
paths:
  /books:
    get:
      tags:
        - Books
      summary: Get all books
      description: The returned books are ordered by updated datetime.
      operationId: getBooks
      parameters:
        - in: query
          name: bookName
          description: Filter return books by given name
          required: false
          schema:
            type: string
        - in: query
          name: releaseDateMin
          schema:
            type: string   
            format: date
          description: 
            If `releaseDateMax` is not provided, `releaseDateMin` is ignored.
            `releaseDateMin` can not be after `releaseDateMax`
          required: false
        - in: query
          name: releaseDateMax
          description: 
            If `releaseDateMin` is not provided, `releaseDateMax` is ignored
            `releaseDateMax` can not be after `releaseDateMin`
          schema: 
            type: string
            format: date
          required: false
        - $ref: '#/components/parameters/queryPage'
        - $ref: '#/components/parameters/queryPageSize'
      responses:
        200:
          $ref: '#/components/responses/BookList200'
        400: 
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
    put:
      tags:
        - Books
      summary: Create or update a list of books
      operationId: crupdateBooks
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Book'
      responses:
        200:
          $ref: '#/components/responses/BookList200'
        400: 
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'

  /books/{bookId}/authors/{authorId}:
    put:
      tags:
        - Books
      summary: Update a book's author
      operationId: updateBooksAuthors
      parameters:
        - in: path
          name: bookId
          description: ID of a books
          required: true
          schema:
            type: string
        - in: path
          name: authorId
          description: ID of an author
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/BookList200'
        400: 
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
  
  /books/authors:
    put:
      tags:
        - Book
      summary: Create or update book
      operationId: updateBookAuthors
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UpdateBookAuthor'
      responses:
        200:
          $ref: '#/components/responses/BookList200'
        400: 
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'

  /authors/{page}/{size}:
    get:
      tags:
        - Authors
      summary: Get authors
      operationId: getAuthors
      parameters:
        - in: path
          name: name
          description: Filter return authors by given name
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/pathPage'
        - $ref: '#/components/parameters/pathPage'   
      responses:
        200:
          $ref: '#/components/responses/AuthorList200'
        400: 
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
  
  /authors:
    put:
      tags:
        - Authors
      summary: Create or update a list of authors
      operationId: updateAuthors
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Author'
      responses:
        200:
          $ref: '#/components/responses/AuthorList200'
        400: 
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'  
  
  /authors/{id}:
    delete:
      tags:
        - Authors
      summary: Delete authors by name
      operationId: deleteAuthors
      parameters:
        - name: id
          in: path
          description: Author identifier to be deleted
          schema: 
            type: string
          required: true
      responses:
        200:
          $ref: '#/components/responses/Author200'
        400: 
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500' 

components:
  schemas:
    Book:
      allOf:
        - $ref: '#/components/schemas/CrupdateBook'
      properties:
        author:
          $ref:  '#/components/schemas/Author'

    CrupdateBook:
      type: object
      properties:
        id:
          type: string
        bookName:
          type: string
        pageNumbers:
          type: integer
        topic:
          type: string
          enum:
            - ROMANCE
            - COMEDY
            - OTHER
        releaseDate:
          type: string
          format: date

    UpdateBookAuthor:
      type: object
      properties:
        bookId: 
          type: string
        authorId:
          type: string

    Author:
      type: object
      properties:
        id:
          type: string
        name: 
          type: string
        sex: 
          $ref: '#/components/schemas/Sex'
    Sex: 
      type: string
      enum:
        - M
        - F

    ImportBook:
      allOf:
        - $ref: '#/components/schemas/Book'
        - type: object
          properties:
            idAuthor:
              type: string
              
    ImportAuthors:
      type: object
      properties:
        authorName:
          type: string
        sex:
          $ref: '#/components/schemas/Sex'

    status:
      type: object
      properties:
        code:
          type: integer
        message:
          type: string
    body:
      type: object

    ApiResponse:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/status'
        body:
          $ref: '#/components/schemas/body'

    InternalServerException:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
          body: {}
          example:
            code: 500
            description: Internal Server Error

    Forbidden:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
          body: {}
          example:
            code: 403
            description: Forbidden

    BadRequest:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
          body: {}
          example: 
            code: 400
            description: Bad Request 
    
    BookList200:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
          properties:
            body:
              type: array
              items:
                $ref: '#/components/schemas/Book'
    
    AuthorList200:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
          properties:
            body:
              type: array
              items:
                $ref: '#/components/schemas/Author'
    
    Author200: 
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
          properties:
            body:
              type: object
              $ref: '#/components/schemas/Author'
 
  responses:
    "BookList200":
      $ref: '#/components/schemas/BookList200'
      description: The list of filtered books
    "AuthorList200":
      $ref: '#/components/schemas/AuthorList200'
      description: The list of filtered authors
    "Author200":
      $ref: '#/components/schemas/Author200'
      description: The deleted authors
    '400':
      $ref: '#/components/schemas/BadRequest'
    '403':
      $ref: '#/components/schemas/Forbidden'
    '500':
      $ref: '#/components/schemas/InternalServerException'

  parameters:
    queryPage:
      in: query
      name: page
      required: false
      schema: 
        type: integer
        default: 1
    queryPageSize:
      in: query
      name: pageSize
      required: false 
      schema: 
        type: integer
        default: 50

    pathPage:
      in: path
      name: page
      required: true
      schema: 
        type: integer
        default: 1
    pathPageSize:
      in: path
      name: pageSize
      required: true
      schema: 
        type: integer
        default: 50